{
  "openapi": "3.0.1",
  "info": {
    "title": "Leapa API Reference",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.leapa.co/v2"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/transfers/{transfer_id}": {
      "get": {
        "tags": ["get", "Transfers"],
        "summary": "Get a transfer.",
        "description": "Get a transfer.",
        "operationId": "getTransfer",
        "parameters": [
          {
            "name": "transfer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Transfers", "put"],
        "summary": "Update a transfer.",
        "description": "Update a transfer.",
        "operationId": "updateTransfer",
        "parameters": [
          {
            "name": "transfer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": ["Refunds", "get"],
        "summary": "Get the refund",
        "description": "Get the refund",
        "operationId": "getRefund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Refunds", "put"],
        "summary": "Update the refund",
        "description": "Update the refund",
        "operationId": "updateRefund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rates/{rate_id}": {
      "get": {
        "tags": ["Rates", "get"],
        "summary": "Get a Rates",
        "description": "Get a Rates",
        "operationId": "getRates",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rates", "put"],
        "summary": "Update a rate",
        "description": "Update a rate",
        "operationId": "updateRate",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Rates", "Rate", "delete"],
        "summary": "Delete a Rate",
        "description": "Delete a rate",
        "operationId": "deleteRate",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rates/{rate_id}/rates": {
      "put": {
        "tags": ["Rates", "Rate", "put"],
        "summary": "Calculate a Amount upon applying a rate",
        "description": "Calculate a Amount upon applying a rate",
        "operationId": "calculateRateAmount",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateAmountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RateAmountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": ["Products", "get"],
        "summary": "Get a Product",
        "description": "Get a Product",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Products", "put"],
        "summary": "Update a product",
        "description": "Update a product",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Products", "delete"],
        "summary": "Delete a product",
        "description": "Delete a product",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payouts/{payout_id}": {
      "get": {
        "tags": ["Payout", "get", "Payouts"],
        "summary": "Get the payout",
        "description": "Get the payout",
        "operationId": "getPayout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Payout", "Payouts", "put"],
        "summary": "Update the payout.",
        "description": "Update the payout.",
        "operationId": "updatePayout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}": {
      "get": {
        "tags": ["get", "Invoices"],
        "summary": " Get an invoice",
        "description": " Get an invoice",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["update", "Invoices"],
        "summary": " Update an invoice",
        "description": " Update an invoice",
        "operationId": "updateInvoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Invoices", "delete"],
        "summary": " Delete invoice, that is in draft state only.",
        "description": " Delete invoice, that is in draft state only.",
        "operationId": "deleteInvoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}/void": {
      "put": {
        "tags": ["Invoices", "put"],
        "summary": " Void an invoice sent to the customer",
        "description": " Void an invoice sent to the customer",
        "operationId": "voidAnInvoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}/send": {
      "put": {
        "tags": ["Invoices", "put"],
        "summary": "Send an invoice to the customer",
        "description": "Send an invoice to the customer",
        "operationId": "sendInvoiceToCustomer",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceSentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}/pay/mobile": {
      "put": {
        "tags": ["Invoices", "put"],
        "summary": " Process the payment of this invoice with New Mobile Money",
        "description": " Process the payment of this invoice with New Mobile Money",
        "operationId": "payInvoiceWithMobile",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeInvoiceMobileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}/pay/card": {
      "put": {
        "tags": ["Invoices", "put"],
        "summary": "Process the payment of this invoice with existing source",
        "description": "Process the payment of this invoice with existing source",
        "operationId": "payInvoice",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeInvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get a customer by Id",
        "description": "Get a customer by Id",
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Customers", "put"],
        "summary": "Update Customer",
        "description": "Update Customer",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Customers", "delete"],
        "summary": "Delete Customer",
        "description": "Delete Customer",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/sources/{account_id}": {
      "put": {
        "tags": ["Customers_card", "Customers", "put"],
        "summary": "Update the customer source ",
        "description": "Update the customer source ",
        "operationId": "updateCustomerCard",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Customers", "delete"],
        "summary": " Delete a customer source account.",
        "description": " Delete a customer source account. ",
        "operationId": "deleteCustomerSource",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/mobile/{account_id}": {
      "put": {
        "tags": ["Customers_card", "Customers", "put"],
        "summary": "Update the customer Mobile destination ",
        "description": "Update the customer Mobile destination ",
        "operationId": "updateCustomerDestinationMobile",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/bank/{account_id}": {
      "put": {
        "tags": ["Customers_card", "Customers", "put"],
        "summary": "Update the customer destination ",
        "description": "Update the customer destination ",
        "operationId": "updateCustomerDestinationBank",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BankDestinationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/email/{email}/otp": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get OTP of a customer by email",
        "description": "Get OTP of a customer by email",
        "operationId": "getCustomerOTP",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OtaVerificationCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Customers", "get"],
        "summary": "Resolve a customer by email",
        "description": "Resolve a customer by email",
        "operationId": "resolveCustomerInfo",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/{charge_id}": {
      "get": {
        "tags": ["get", "Charges"],
        "summary": "Get charge of a customer",
        "description": "Get charge of a customer",
        "operationId": "getCharge",
        "parameters": [
          {
            "name": "charge_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Charges", "put"],
        "summary": "Update a charge of a customer",
        "description": "Update a charge of a customer",
        "operationId": "updateCharge",
        "parameters": [
          {
            "name": "charge_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "tags": ["get", "Transfers"],
        "summary": "Get all transfers.",
        "description": "Get all transfers.",
        "operationId": "getAllTransfer",
        "parameters": [
          {
            "name": "pageFilterTransfer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilterTransfer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post", "Transfers"],
        "summary": "Create a transfer.",
        "description": "Create a transfer.",
        "operationId": "createTransfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refunds": {
      "get": {
        "tags": ["Refunds", "get"],
        "summary": "Get the most recent refunds",
        "description": "Get the most recent refunds",
        "operationId": "getRefunds",
        "parameters": [
          {
            "name": "pageFilterRefund",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilterRefund"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post", "Refunds"],
        "summary": "Create a Refund. Fund will be refund to the credit card where it was originally charged.",
        "description": "Create a Refund. Fund will be refund to the credit card where it was originally charged.",
        "operationId": "createRefund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rates": {
      "get": {
        "tags": ["Rates", "get"],
        "summary": "Get All Rates",
        "description": "Get All Rates",
        "operationId": "getAllRates",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rates", "post"],
        "summary": "Create new Rates ",
        "description": "Create a new Rates",
        "operationId": "createRates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Products", "get"],
        "summary": "Get All Product",
        "description": "Get All Product",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "pageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Products", "post"],
        "summary": "Create a Product",
        "description": "Create a Product",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payouts": {
      "get": {
        "tags": ["Payout", "get", "Payouts"],
        "summary": "Get the most recent payouts list",
        "description": "Get the most recent payouts list",
        "operationId": "getPayouts",
        "parameters": [
          {
            "name": "payoutPageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilterPayout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post", "Payout", "Payouts"],
        "summary": "Create payout",
        "description": "Create payout",
        "operationId": "createPayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pages/charges/auth": {
      "post": {
        "tags": ["Pages", "Invoice_Pages", "post"],
        "summary": " Charge Authorization from Invoice Page",
        "description": " Charge Authorization from Invoice Page",
        "operationId": "createChargeFromPages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceChargeAuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": ["get", "Invoices"],
        "summary": "Get all invoice issue by the Merchant (owner of the account)",
        "description": "Get all invoice issue by the Merchant (owner of the account)",
        "operationId": "getInvoices",
        "parameters": [
          {
            "name": "pageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post", "Invoices"],
        "summary": " Create an invoice",
        "description": " Create an invoice",
        "operationId": "createInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/rates": {
      "post": {
        "tags": ["post", "Invoices"],
        "summary": " Check invoice amount upon applying the rate",
        "description": "Check invoice amount upon applying the rate",
        "operationId": "applyRateOninvoiceAmount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceAmountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceAmountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/emails/{email_type}": {
      "post": {
        "tags": ["Emails"],
        "operationId": "sendEmail",
        "parameters": [
          {
            "name": "email_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "welcomeCode",
                "welcome",
                "forgetPassword",
                "securityCode",
                "inviteUser",
                "reservationCancelled",
                "reservationCreated",
                "reservationUpdated"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": ["Customers", "get", "Customers_all"],
        "summary": "Get All Customers for the merchant",
        "description": "Get All Customers for the merchant",
        "operationId": "getCustomers",
        "parameters": [
          {
            "name": "pageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["post", "Customers"],
        "summary": "Create Customer",
        "description": "Create Customer",
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/sources/mobile": {
      "post": {
        "tags": ["post", "Customers", "Customers_mobile"],
        "summary": "Add a mobile money source to the customer account",
        "description": "Add a mobile money source to the customer account",
        "operationId": "addMobileMoneyToCustomer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/sources/card": {
      "post": {
        "tags": ["Customers_card", "post", "Customers"],
        "summary": "Add a source card to the customer account",
        "description": "Add a source card to the customer account",
        "operationId": "addCustomerCard",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/mobile": {
      "post": {
        "tags": ["post", "Customers", "Customers_mobile_destination"],
        "summary": "Add a destination mobile account to the customer account",
        "description": "Add a destination  Mobile to the customer account",
        "operationId": "addCustomerMobileDestination",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/bank": {
      "post": {
        "tags": ["Customers_bank_destination", "post", "Customers"],
        "summary": "Add a destination bank account to the customer account",
        "description": "Add a destination  Bank to the customer account",
        "operationId": "addCustomerBankDestination",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankDestinationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BankDestinationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/pages/auth": {
      "post": {
        "tags": ["post", "Charges", "Charges_Pages"],
        "summary": "Charge Authorization from Invoice Page",
        "description": "Charge Authorization from Invoice Page",
        "operationId": "createChargeFromPages_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceChargeAuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/otp/{number}": {
      "post": {
        "tags": ["OPT", "post", "Charges"],
        "summary": "Create new OTP",
        "description": "create new OTP",
        "operationId": "postChargeOtp",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/mobile": {
      "post": {
        "tags": ["Charges_Mobile", "post", "Charges"],
        "summary": "Create charge for a customer via mobile",
        "description": "Create charge for a customer via mobile",
        "operationId": "createChargeByMobile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeMobileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/card": {
      "post": {
        "tags": ["post", "Charges_Card", "Charges"],
        "summary": "Create charge for a customer via card",
        "description": "Create charge for a customer via card",
        "operationId": "createChargeByCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeCardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges/auth": {
      "post": {
        "tags": ["post", "Charges"],
        "summary": "Charge Authorization",
        "description": "Charge Authorization",
        "operationId": "createCharge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeAuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction_lines": {
      "get": {
        "tags": ["get", "TransactionLines"],
        "summary": "Get the most recent Transaction lines list",
        "description": "Get the most recent Transaction lines list",
        "operationId": "getListOfTransactionLines",
        "parameters": [
          {
            "name": "transactionPageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilterTransactionLines"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionLinesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pages/invoices/{invoice_id}": {
      "get": {
        "tags": ["Pages", "get", "INvoice_Pages"],
        "summary": "Get an invoice",
        "description": "Get an invoice",
        "operationId": "getFromInvoicePages",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pages/invoices/{invoice_id}/pdf": {
      "get": {
        "tags": ["Pages", "Invoice_Pages", "get"],
        "summary": " Print the Invoice PDF from Invoice Pages",
        "description": " Print the Invoice PDF from Invoice Pages",
        "operationId": "getInvoicePagesPdfFile",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoice_id}/pdf": {
      "get": {
        "tags": ["get", "Invoices"],
        "summary": " Print the Invoice PDF",
        "description": " Print the Invoice PDF",
        "operationId": "getInvoicePdfFile",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/reference/{reference_id}": {
      "get": {
        "tags": ["get", "Invoices"],
        "summary": "Get an invoice by reference id",
        "description": "Get an invoice by reference id",
        "operationId": "getInvoiceByReferenceId",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/email/{email}": {
      "get": {
        "tags": ["InvoicesSearch", "get", "Invoices"],
        "summary": " Get all invoice issue by the Merchant (owner of the account)",
        "description": " Get all invoice issue by the Merchant (owner of the account)",
        "operationId": "searchInvoiceByEmail",
        "parameters": [
          {
            "name": "pageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilter"
            }
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/sources/{account_id}/mobile": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get customer mobile information.",
        "description": "Return the mobile information of the customer",
        "operationId": "getCustomerMobile",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/sources/{account_id}/card": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get customer  card information.",
        "description": "Return the Card information of the customer",
        "operationId": "getCustomerCard",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/{account_id}/mobile": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get customer mobile information.",
        "description": "Return the mobile information of the customer",
        "operationId": "getCustomerDestinationMobile",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destination/{account_id}/bank": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get customer bank information.",
        "description": "Return the mobile information of the customer",
        "operationId": "getCustomerDestinationBank",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BankResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/reference/{reference_id}": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get a customer by reference Id",
        "description": "Get a customer by reference Id",
        "operationId": "getCustomerByReferenceId",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/email/{email}": {
      "get": {
        "tags": ["Customers", "get"],
        "summary": "Get a customer by email",
        "description": "Get a customer by email",
        "operationId": "getCustomerByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/charges": {
      "get": {
        "tags": ["Charges_all", "get", "Charges"],
        "summary": "Get all the most recent charges",
        "description": "Get all the most recent charges",
        "operationId": "getCharges",
        "parameters": [
          {
            "name": "pageFilter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageFilterCharge"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChargesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analytics": {
      "get": {
        "tags": ["analytics_all", "get", "Dashboard"],
        "summary": "Analytics",
        "description": "Analytics",
        "operationId": "getAnalytics",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AnalyticFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/transaction/{transaction_id}": {
      "get": {
        "tags": ["Events", "get", "Dashboard"],
        "summary": "Get events by transaction ID",
        "description": "Get events by transaction ID",
        "operationId": "getTransactionEvent",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventByTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/account/{account_id}": {
      "get": {
        "tags": ["Events", "get", "Dashboard"],
        "summary": "Get Events by account ID",
        "description": "Get Events by account ID",
        "operationId": "getEventsByAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventByAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/destinations/{account_id}": {
      "delete": {
        "tags": ["Customers", "delete"],
        "summary": " Delete a customer destination account.",
        "description": " Delete a customer destination account. ",
        "operationId": "deleteCustomerDestination",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "428": {
            "description": "Precondition Required",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "sub_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubError"
            }
          }
        }
      },
      "ApiSubError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "TransferUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the transfer."
          }
        }
      },
      "TransferResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": " Id of the transfer"
          },
          "object": {
            "type": "string",
            "description": " object to be returned"
          },
          "amount": {
            "type": "integer",
            "description": " Amount to be transferred.",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-Letter ISO currency code",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string",
            "description": "Description of the payout."
          },
          "type": {
            "type": "string",
            "description": "Type of the transfer. Either deposit or reversal",
            "enum": ["deposit", "reversal"]
          },
          "created_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the record was created.",
            "format": "int64"
          },
          "merchant_id": {
            "type": "string",
            "description": "ID of the merchant receiving the fund"
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the merchant receiving the fund"
          },
          "live": {
            "type": "boolean",
            "description": "Whether the object exist in live or test mode. "
          },
          "modified_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the object was modified.",
            "format": "int64"
          },
          "reversal_id": {
            "type": "string",
            "description": "ID of the reversal transfer for a deposit. Only valid for bank and card type."
          }
        }
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the refund."
          }
        }
      },
      "RefundResponse": {
        "required": [
          "amount",
          "charge_id",
          "created_date",
          "currency",
          "failure_reason",
          "id",
          "invoice_id",
          "reason",
          "source_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The refund Id"
          },
          "object": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "description": "Amount refunded.",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-Letter ISO currency code",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string",
            "description": "Description of the refund"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund. Either duplicate, fraudulent, requested_by_customer or for an expired capture, expired_uncaptured_charge",
            "enum": ["duplicate", "fraudulent", "requested_by_customer"]
          },
          "status": {
            "type": "string",
            "description": "Status of the refund. Either succeeded, pending, or failed",
            "enum": ["succeeded", "paid", "pending", "failed"]
          },
          "receivingAccountId": {
            "type": "string"
          },
          "charge_id": {
            "type": "string",
            "description": "Charge Id associate to this refund"
          },
          "created_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the object was created.",
            "format": "int64"
          },
          "source_id": {
            "type": "string",
            "description": "ID of the card account the refund was sent to"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason of the failure: lost_or_stolen_card, expired_or_canceled_card, or unknown",
            "enum": [
              "lost_or_stolen_card",
              "expired_or_canceled_card",
              "unknown"
            ]
          },
          "invoice_id": {
            "type": "string",
            "description": "Id of the invoice the charge was"
          },
          "live": {
            "type": "boolean",
            "description": "Whether the object exist in live or test mode. "
          },
          "modified_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the object was modified.",
            "format": "int64"
          },
          "processing_id": {
            "type": "string",
            "description": "Reference Number of the bank deposit. Constraint: Notnull"
          }
        }
      },
      "RateUpdateRequest": {
        "required": ["code", "name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rate Name"
          },
          "code": {
            "type": "string",
            "description": "Rate Code"
          },
          "description": {
            "type": "string",
            "description": " Descrition of the Rates"
          }
        }
      },
      "RateResponse": {
        "required": ["amount", "amount_limit"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate ID"
          },
          "name": {
            "type": "string",
            "description": "Rate Name"
          },
          "code": {
            "type": "string",
            "description": "Rate Code"
          },
          "type": {
            "type": "string",
            "description": " Rates Type ",
            "enum": ["time", "amountLimit", "timeProximity"]
          },
          "days": {
            "type": "array",
            "description": " Week Days ",
            "items": {
              "type": "string",
              "description": " Week Days ",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          },
          "amount": {
            "type": "number",
            "description": " It is a percentage amount ?",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": " Descrition of the Rates"
          },
          "from_date": {
            "type": "integer",
            "description": " From date for time based rates",
            "format": "int64"
          },
          "to_date": {
            "type": "integer",
            "description": " To date for time based rates",
            "format": "int64"
          },
          "amount_limit": {
            "type": "integer",
            "description": " Amount limit used for the  Amount based Rate,  ",
            "format": "int64"
          },
          "created_date": {
            "type": "integer",
            "description": "Rates creation time",
            "format": "int64"
          }
        }
      },
      "RateAmountRequest": {
        "required": ["amount"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": " Amount on which the rate would be applied to",
            "format": "int64"
          }
        }
      },
      "RateAmountResponse": {
        "required": ["amount", "rate", "rate_amount"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": " Amount on which the rate would be applied to",
            "format": "double"
          },
          "rate": {
            "$ref": "#/components/schemas/RateResponse"
          },
          "rate_amount": {
            "type": "integer",
            "description": " Amount after applying rate,  ",
            "format": "int64"
          }
        }
      },
      "PriceDetailRequest": {
        "required": ["currency", "price"],
        "type": "object",
        "properties": {
          "price": {
            "type": "integer",
            "description": " Price of the product. Constraints: Not null, Should be a positive number",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": " Currency of the product. Constraints: Not null, Should be a positive number",
            "enum": ["BIF", "USD", "KES", "XAF"]
          }
        },
        "description": " List of Product Price Details. Constraints: Not null "
      },
      "ProductUpdateRequest": {
        "required": ["price_details"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 3,
            "type": "string",
            "description": " Name of the product. Constraint: Optional, Ignore null value, (min=3, max=40)"
          },
          "status": {
            "type": "string",
            "description": " Status of the product. Contraint: ignore null value",
            "enum": ["soldout", "available", "unavailable"]
          },
          "description": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "description": " Short description of the product. Constraint: Optional, Ignore null value, Size (min= 3, max=100)"
          },
          "type": {
            "type": "string",
            "description": " Product type. Constraint: Optional, Ignore null value",
            "enum": [
              "service",
              "good",
              "addon",
              "standard_room",
              "single_room",
              "double_room",
              "triple_room",
              "quad_room",
              "suite_room",
              "presidential_room",
              "king_room",
              "queen_room",
              "interconnecting_room",
              "adjoining_room",
              "adjacent_room",
              "studio_room",
              "efficiency_room",
              "chalet",
              "condo",
              "duplex",
              "room",
              "apartment",
              "hospitality"
            ]
          },
          "price_details": {
            "type": "array",
            "description": " List of Product Price Details. Constraints: Not null ",
            "items": {
              "$ref": "#/components/schemas/PriceDetailRequest"
            }
          },
          "code": {
            "type": "string",
            "description": " Code of the product. Constraint: Optional, Ignore null value"
          },
          "rate_ids": {
            "type": "array",
            "description": " List of Rate Id that can be applied to the product price. ",
            "items": {
              "type": "string",
              "description": " List of Rate Id that can be applied to the product price. "
            }
          }
        }
      },
      "PriceDetailResponse": {
        "type": "object",
        "properties": {
          "price": {
            "type": "integer",
            "description": " Price of the product. Constraints: Not null, Should be a positive number",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": " Currency of the product. Constraints: Not null, Should be a positive number",
            "enum": ["BIF", "USD", "KES", "XAF"]
          }
        },
        "description": "Detail of the price"
      },
      "ProductAttribute": {
        "type": "object",
        "properties": {
          "bedType": {
            "type": "string"
          },
          "numberOfGuests": {
            "type": "integer",
            "format": "int32"
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AIR_CONDITIONING",
                "DESK",
                "BATHTUB",
                "PRIVATE_POOL",
                "TERRACE",
                "BALCONY",
                "FLAT_SCREEN_TV",
                "WASHING_MACHINE",
                "COFFEE_MAKER",
                "TEA_MAKER"
              ]
            }
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID"
          },
          "name": {
            "type": "string",
            "description": "Product Name"
          },
          "code": {
            "type": "string",
            "description": "Product Code"
          },
          "description": {
            "type": "string",
            "description": "Product Description"
          },
          "status": {
            "type": "string",
            "description": "Product Status",
            "enum": ["soldout", "available", "unavailable"]
          },
          "type": {
            "type": "string",
            "description": "Product type",
            "enum": [
              "service",
              "good",
              "addon",
              "standard_room",
              "single_room",
              "double_room",
              "triple_room",
              "quad_room",
              "suite_room",
              "presidential_room",
              "king_room",
              "queen_room",
              "interconnecting_room",
              "adjoining_room",
              "adjacent_room",
              "studio_room",
              "efficiency_room",
              "chalet",
              "condo",
              "duplex",
              "room",
              "apartment",
              "hospitality"
            ]
          },
          "images": {
            "type": "array",
            "description": " List of images URL of the product",
            "items": {
              "type": "string",
              "description": " List of images URL of the product"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/ProductAttribute"
          },
          "rateId": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "type": "integer",
            "description": "Product creation time",
            "format": "int64"
          },
          "price_details": {
            "type": "array",
            "description": "Detail of the price",
            "items": {
              "$ref": "#/components/schemas/PriceDetailResponse"
            }
          },
          "live": {
            "type": "boolean",
            "description": "Whether is the production data or test data. "
          },
          "rate_ids": {
            "type": "array",
            "description": " Rate Id that will affect the product price. ",
            "items": {
              "type": "string",
              "description": " Rate Id that will affect the product price. "
            }
          }
        }
      },
      "PayoutUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the payout."
          }
        }
      },
      "PayoutResponse": {
        "required": [
          "account_id",
          "amount",
          "created_date",
          "currency",
          "description",
          "failure_code",
          "failure_message",
          "id",
          "object"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the Payout"
          },
          "object": {
            "type": "string",
            "description": "Type of object returned -  Payout"
          },
          "amount": {
            "type": "integer",
            "description": "Amount collected to be deposited",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-Letter ISO currency code",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string",
            "description": "Description of the payout."
          },
          "reversal": {
            "type": "string",
            "description": "ID of the reversal transfer for a deposit. Only valid for bank and card type."
          },
          "status": {
            "type": "string",
            "description": "Status of the payout. Either paid, pending, in_transit, canceled or failed. Only valid for bank and card type.",
            "enum": ["paid", "pending", "in_transit", "canceled", "failed"]
          },
          "type": {
            "type": "string",
            "description": "Bank, card or reversal",
            "enum": ["bank", "card"]
          },
          "automatic": {
            "type": "boolean",
            "description": "Whether the Payout was done by automate payout schedule or was requested manually. (Only valid for Bank and card type)."
          },
          "liveMode": {
            "type": "boolean"
          },
          "arrival_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the payout is expected to arrive in the bank. Factors in weekends and bank holidays.",
            "format": "int64"
          },
          "created_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the record was created.",
            "format": "int64"
          },
          "account_id": {
            "type": "string",
            "description": "ID of the bank account the payout was sent to"
          },
          "failure_code": {
            "type": "string",
            "description": "Different failed code: account_closed, account_frozen, account_restricted, could_not_process, declined, invalid_account_info, invalid_currency, unsupported_card",
            "enum": [
              "account_closed",
              "account_frozen",
              "account_restricted",
              "could_not_process",
              "declined",
              "invalid_account_info",
              "invalid_currency",
              "unsupported_card"
            ]
          },
          "failure_message": {
            "type": "string",
            "description": "Message explaining reason for charge failure"
          },
          "live": {
            "type": "boolean",
            "description": "Whether the object exist in live or test mode. "
          },
          "modified_date": {
            "type": "integer",
            "description": "UTC UNIX Epoch Timestamp in millisecond at which the object was modified.",
            "format": "int64"
          },
          "processing_id": {
            "type": "string",
            "description": "The Bank reference number of the deposit."
          }
        }
      },
      "InvoiceUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 120,
            "minLength": 3,
            "type": "string",
            "description": " Description of the invoice. Constraints: Not null"
          },
          "due_date": {
            "type": "string",
            "description": " Invoice due date. Constraints: Not null, format(YYYY-MM-DD)",
            "format": "date"
          },
          "rate_id": {
            "type": "string",
            "description": " Rate Id that can be applied to the invoice price. "
          }
        }
      },
      "AccountCustomerDestinationReferenceResponse": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency Code.",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "type": {
            "type": "string",
            "description": "Account Type",
            "enum": ["bank", "balance", "card", "fees", "mobile"]
          },
          "account_id": {
            "type": "string",
            "description": "Account Id of the customer"
          },
          "default_destination": {
            "type": "boolean"
          }
        },
        "description": "List of all Account Reference destination of the customer"
      },
      "AccountCustomerSourceReferenceResponse": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string",
            "description": "Unique identifier of the card. Two accountId with the same fingerprint is the same card"
          },
          "currency": {
            "type": "string",
            "description": "Currency Code.",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "account_id": {
            "type": "string",
            "description": "Account Id of the customer"
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating whether it is a default card or not."
          }
        },
        "description": "List of all Account Reference source of the customer"
      },
      "AddressResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Object name "
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "type": {
            "type": "string",
            "description": "The type of address. Can be Business location address or Bank Address",
            "enum": ["personal", "business"]
          },
          "status": {
            "type": "string",
            "description": "Address status - invalid, line1_fail, line1_pass, line1_zip_pass, unchecked, verified, zip_fail, zip_pass",
            "enum": [
              "invalid",
              "line1_pass",
              "line1_name_pass",
              "line1_zip_pass",
              "name_pass",
              "name_zip_pass",
              "unchecked",
              "verified",
              "zip_pass"
            ]
          },
          "state": {
            "type": "string",
            "description": "State"
          },
          "zip": {
            "type": "string",
            "description": "Zip"
          },
          "line1": {
            "type": "string",
            "description": "Line 1"
          },
          "line2": {
            "type": "string",
            "description": "Line 2"
          }
        },
        "description": "Customer address"
      },
      "AddressResponseAccount": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Object name "
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "type": {
            "type": "string",
            "description": "The type of address. Can be Business location address or Bank Address",
            "enum": ["personal", "business"]
          },
          "status": {
            "type": "string",
            "description": "Address status - invalid, line1_fail, line1_pass, line1_zip_pass, unchecked, verified, zip_fail, zip_pass",
            "enum": [
              "invalid",
              "line1_pass",
              "line1_name_pass",
              "line1_zip_pass",
              "name_pass",
              "name_zip_pass",
              "unchecked",
              "verified",
              "zip_pass"
            ]
          },
          "state": {
            "type": "string",
            "description": "State"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "enum": ["BI"]
          },
          "zip": {
            "type": "string",
            "description": "Zip"
          },
          "line1": {
            "type": "string",
            "description": "Line 1"
          },
          "line2": {
            "type": "string",
            "description": "Line 2"
          }
        },
        "description": "Business Address"
      },
      "ChargeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["succeeded", "paid", "pending", "failed"]
          },
          "source": {
            "$ref": "#/components/schemas/SourceObject"
          },
          "amount_refunded": {
            "type": "integer",
            "format": "int64"
          },
          "available_date": {
            "type": "integer",
            "format": "int64"
          },
          "captured": {
            "type": "boolean"
          },
          "created_date": {
            "type": "integer",
            "format": "int64"
          },
          "disputed": {
            "type": "boolean"
          },
          "failure_code": {
            "type": "string"
          },
          "failure_message": {
            "type": "string"
          },
          "invoice_id": {
            "type": "string"
          },
          "live": {
            "type": "boolean"
          },
          "modified_date": {
            "type": "integer",
            "format": "int64"
          },
          "refunded": {
            "type": "boolean"
          },
          "customer_id": {
            "type": "string"
          },
          "processing_id": {
            "type": "string"
          }
        },
        "description": " Invoice Charge "
      },
      "CustomerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer Unique ID"
          },
          "object": {
            "type": "string",
            "description": "Customer - Object Returned"
          },
          "email": {
            "type": "string",
            "description": "Customer email"
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "status": {
            "type": "string",
            "description": "Customer Status",
            "enum": ["active", "deactivate", "deleted"]
          },
          "first_name": {
            "type": "string",
            "description": "Customer firstname"
          },
          "last_name": {
            "type": "string",
            "description": "Customer lastname"
          },
          "birth_date": {
            "type": "string",
            "description": "Customer birthdate"
          },
          "phone_number": {
            "type": "string",
            "description": "Customer phone number"
          },
          "merchant_name": {
            "type": "string",
            "description": "Merchant name associated to this Customer"
          },
          "merchant_id": {
            "type": "string",
            "description": "Merchant ID associated to this Customer"
          },
          "sources": {
            "type": "array",
            "description": "List of all Account Reference source of the customer",
            "items": {
              "$ref": "#/components/schemas/AccountCustomerSourceReferenceResponse"
            }
          },
          "destinations": {
            "type": "array",
            "description": "List of all Account Reference destination of the customer",
            "items": {
              "$ref": "#/components/schemas/AccountCustomerDestinationReferenceResponse"
            }
          },
          "live": {
            "type": "boolean",
            "description": "Whether the object exist in live or test mode."
          },
          "reference_id": {
            "type": "string",
            "description": "Reference Id"
          }
        },
        "description": " Customer information "
      },
      "InvoiceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": " Generated Invoice Id by the system "
          },
          "object": {
            "type": "string",
            "description": " Invoice object. "
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          },
          "currency": {
            "type": "string",
            "description": " Currency of the amount in the invoice. ",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string",
            "description": " Description of the invoice. "
          },
          "pdfLink": {
            "type": "string",
            "writeOnly": true
          },
          "number": {
            "type": "string",
            "description": " Invoice Number in a readable version for the user. "
          },
          "products": {
            "type": "array",
            "description": " List of product and quantity. ",
            "items": {
              "$ref": "#/components/schemas/ItemResponse"
            }
          },
          "sent_count": {
            "type": "integer",
            "description": " Number of time the invoice has been send to the customer for payment. ",
            "format": "int32"
          },
          "statement_descriptor": {
            "type": "string",
            "description": " Statement Descriptor of the Merchant. This is a readOnly data. "
          },
          "issue_date": {
            "type": "integer",
            "description": " Invoice issue date. ",
            "format": "int64"
          },
          "due_date": {
            "type": "integer",
            "description": " Invoice due date. ",
            "format": "int64"
          },
          "amount": {
            "type": "integer",
            "description": " Initial payment request amount to the customer for the service or product of the merchant.  ",
            "format": "int64"
          },
          "amount_due": {
            "type": "integer",
            "description": "Remaining amount due in order to clear this Invoice. ",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": " Status of the invoices: Draft, Pending, Paid, Void",
            "enum": [
              "draft",
              "pending",
              "sent",
              "paid",
              "voided",
              "overdue",
              "refunded"
            ]
          },
          "charge": {
            "$ref": "#/components/schemas/ChargeResponse"
          },
          "url": {
            "type": "string",
            "description": " Invoice url"
          },
          "pdf_url": {
            "type": "string",
            "description": " Url link to download the PDF file of the invoice."
          },
          "source_id": {
            "type": "string",
            "description": "Customer existing source information."
          },
          "manual_payment": {
            "type": "boolean",
            "description": "Send invoice via email for manual payments."
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantProfileResponse"
          },
          "live": {
            "type": "boolean",
            "description": "Whether the object exist in live or test mode."
          },
          "reference_id": {
            "type": "string",
            "description": "Reference Id."
          },
          "rate_id": {
            "type": "string",
            "description": "Rate Id that can be used on this invoice."
          }
        }
      },
      "ItemResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Name of the object"
          },
          "product": {
            "$ref": "#/components/schemas/ProductResponse"
          },
          "quantity": {
            "type": "integer",
            "description": " Quantity billed in the invoice ",
            "format": "int64"
          },
          "adjusted_price": {
            "type": "integer",
            "description": " Price that the merchant will give to this product at the moment of the purchase.",
            "format": "int64"
          }
        },
        "description": " List of product and quantity. "
      },
      "MerchantProfileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Merchant Unique ID"
          },
          "object": {
            "type": "string",
            "description": "Return Object Name"
          },
          "url": {
            "type": "string",
            "description": "Optional field that describe the website URL of your business."
          },
          "currency": {
            "type": "string",
            "description": " Currency Code ",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "name": {
            "type": "string",
            "description": "Business Name"
          },
          "legal_name": {
            "type": "string",
            "description": "Legal Business Name"
          },
          "tax_id": {
            "type": "string",
            "description": "Tax Id of the business"
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "registration_id": {
            "type": "string",
            "description": "Commerce Reg Number"
          },
          "statement_descriptor": {
            "type": "string",
            "description": "Statement Description"
          },
          "description": {
            "type": "string",
            "description": "Small description of your Goods or Services. Constraint: Not null, Not blank, size(5-22)"
          },
          "support_url": {
            "type": "string",
            "description": "Optional field that describe the website URL of the support pages."
          },
          "time_zone": {
            "type": "string",
            "description": "Time Zone of Merchant",
            "enum": ["AFRICA_BUJUMBURA", "AFRICA_DOUALA", "AFRICA_NAIROBI"]
          },
          "type": {
            "type": "string",
            "description": "Holder Type",
            "enum": ["individual", "company"]
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponseAccount"
          },
          "balance_available": {
            "type": "integer",
            "description": "Balance Aavailable for in this account",
            "format": "int64"
          },
          "balance_pending": {
            "type": "integer",
            "description": "Pending balance in this account.",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Merchant Account Status",
            "enum": [
              "pending",
              "validation_in_progress",
              "validation_failed",
              "validated"
            ]
          }
        },
        "description": "Merchant id issuing this Invoice."
      },
      "SourceObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Source id"
          },
          "brand": {
            "type": "string",
            "description": "Payment Method Brand Name: Either Mastercard, Visa or Ecocash(Mobile Money)",
            "enum": ["ecocash", "lumicash", "mastercard", "visa"]
          },
          "funding": {
            "type": "string",
            "description": "Card funding type. Either credit, debit, prepaid, or unknown",
            "enum": ["credit", "debit", "prepaid", "unknown"]
          },
          "last4": {
            "type": "string",
            "description": "Last Four ditgits of the card"
          },
          "email": {
            "type": "string",
            "description": "Email of the card Owner."
          },
          "fingerprint": {
            "type": "string",
            "description": "Unique identifier of the card number as returned by the CyberSource TMS API"
          },
          "token": {
            "type": "string",
            "description": "Unique identifier of the card data as returned by the CyberSource TMS API"
          },
          "language": {
            "type": "string",
            "description": "Prefered Language of the Customer. Used for Mobile Money."
          },
          "number": {
            "type": "string",
            "description": "The mobile money number."
          },
          "cvc_check": {
            "type": "string",
            "description": "Card Verification Code check result",
            "enum": ["pass", "fail", "unavailable", "unchecked"]
          },
          "exp_month": {
            "type": "string",
            "description": "Two digit number representing the expiration number"
          },
          "exp_year": {
            "type": "string",
            "description": "Four digit number representing the expiration date"
          },
          "statement_descriptor": {
            "type": "string",
            "description": "Provides information about the charge that customers see on their statements. Maximum 22 characters."
          },
          "country_code": {
            "type": "string",
            "description": "Country Code, needed when the Payment Method is Mobile Money."
          }
        }
      },
      "InvoiceSentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invoice ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "sent": {
            "type": "boolean",
            "description": " Flag indicating that the invoice is sent."
          }
        }
      },
      "ChargeInvoiceMobileRequest": {
        "required": ["captured", "description", "otp", "source"],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string",
            "description": "Description of the charge."
          },
          "otp": {
            "maxLength": 6,
            "minLength": 6,
            "type": "string",
            "description": "Mobile OTP."
          },
          "source": {
            "$ref": "#/components/schemas/MobileRequest"
          },
          "captured": {
            "type": "boolean",
            "description": "Whether to immediately capture the charge or not."
          }
        }
      },
      "MobileRequest": {
        "required": ["brand", "country_code", "currency", "default", "number"],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "Customer mobile money brand)",
            "enum": ["ecocash", "lumicash"]
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "number": {
            "type": "string",
            "description": "Customer mobile money number)"
          },
          "country_code": {
            "type": "string",
            "description": "Customer mobile money country code)",
            "enum": ["BI"]
          },
          "default": {
            "type": "boolean",
            "description": "Indicating whether this payment method is the default sources of payment. Constraints: Not null"
          }
        },
        "description": "Customer source information."
      },
      "ChargeInvoiceRequest": {
        "required": ["captured"],
        "type": "object",
        "properties": {
          "threeds": {
            "$ref": "#/components/schemas/Threeds"
          },
          "captured": {
            "type": "boolean",
            "description": "Whether to immediately capture the charge or not."
          }
        }
      },
      "Threeds": {
        "required": [
          "action_code",
          "error_description",
          "error_number",
          "validated"
        ],
        "type": "object",
        "properties": {
          "validated": {
            "type": "boolean",
            "description": "Whether Transaction was successful or not"
          },
          "type": {
            "type": "string",
            "description": "Transaction Type",
            "enum": ["CCA"]
          },
          "cavv": {
            "type": "string",
            "description": "Cardholder Authentication Verification Value"
          },
          "eci": {
            "type": "string",
            "description": "Electronic Commerce Indicator"
          },
          "enrolled": {
            "type": "string",
            "description": "Verification vresponse enrollment status"
          },
          "version": {
            "type": "string",
            "description": "3DS Version used"
          },
          "action_code": {
            "type": "string",
            "description": "Resulting State of the transaction",
            "enum": ["SUCCESS", "NOACTION", "FAILURE", "ERROR"]
          },
          "error_number": {
            "type": "integer",
            "description": "Application Error Number",
            "format": "int64"
          },
          "error_description": {
            "type": "string",
            "description": "Application Error Description for the associated Error Number"
          },
          "transaction_id": {
            "type": "string",
            "description": "Payer Authentication transaction identifier"
          },
          "ds_transaction_id": {
            "type": "string",
            "description": "Directory Server Transaction Identifier"
          }
        },
        "description": "3DS Secure Object."
      },
      "AddressRequestGeneric": {
        "required": ["city", "country", "line1", "line2", "type"],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 90,
            "minLength": 3,
            "type": "string",
            "description": "City. Constraints: Not null, Size(min=3, max=90)"
          },
          "state": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "State. Constraints: Size(min=1, max=90)"
          },
          "type": {
            "type": "string",
            "description": "The type of address. Constraints: Not null",
            "enum": ["personal", "business"]
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO Country Code. Constraints: Not null, Size(min=2, max=3)",
            "enum": [
              "AD",
              "AE",
              "AF",
              "AG",
              "AI",
              "AL",
              "AM",
              "AN",
              "AO",
              "AQ",
              "AR",
              "AS",
              "AT",
              "AU",
              "AW",
              "AX",
              "AZ",
              "BA",
              "BB",
              "BD",
              "BE",
              "BF",
              "BG",
              "BH",
              "BI",
              "BJ",
              "BL",
              "BM",
              "BN",
              "BO",
              "BQ",
              "BR",
              "BS",
              "BT",
              "BV",
              "BW",
              "BY",
              "BZ",
              "CA",
              "CC",
              "CD",
              "CF",
              "CG",
              "CH",
              "CI",
              "CK",
              "CL",
              "CM",
              "CN",
              "CO",
              "CR",
              "CU",
              "CV",
              "CW",
              "CX",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DK",
              "DM",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EG",
              "EH",
              "ER",
              "ES",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FM",
              "FO",
              "FR",
              "GA",
              "GB",
              "GD",
              "GE",
              "GF",
              "GG",
              "GH",
              "GI",
              "GL",
              "GM",
              "GN",
              "GP",
              "GQ",
              "GR",
              "GS",
              "GT",
              "GU",
              "GW",
              "GY",
              "HK",
              "HM",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IE",
              "IL",
              "IM",
              "IN",
              "IO",
              "IQ",
              "IR",
              "IS",
              "IT",
              "JE",
              "JM",
              "JO",
              "JP",
              "KE",
              "KG",
              "KH",
              "KI",
              "KM",
              "KN",
              "KP",
              "KR",
              "KW",
              "KY",
              "KZ",
              "LA",
              "LB",
              "LC",
              "LI",
              "LK",
              "LR",
              "LS",
              "LT",
              "LU",
              "LV",
              "LY",
              "MA",
              "MC",
              "MD",
              "ME",
              "MF",
              "MG",
              "MH",
              "MK",
              "ML",
              "MM",
              "MN",
              "MO",
              "MP",
              "MQ",
              "MR",
              "MS",
              "MT",
              "MU",
              "MV",
              "MW",
              "MX",
              "MY",
              "MZ",
              "NA",
              "NC",
              "NE",
              "NF",
              "NG",
              "NI",
              "NL",
              "NO",
              "NP",
              "NR",
              "NU",
              "NZ",
              "OM",
              "PA",
              "PE",
              "PF",
              "PG",
              "PH",
              "PK",
              "PL",
              "PM",
              "PN",
              "PR",
              "PS",
              "PT",
              "PW",
              "PY",
              "QA",
              "RE",
              "RO",
              "RS",
              "RU",
              "RW",
              "SA",
              "SB",
              "SC",
              "SD",
              "SE",
              "SG",
              "SH",
              "SI",
              "SJ",
              "SK",
              "SL",
              "SM",
              "SN",
              "SO",
              "SR",
              "SS",
              "ST",
              "SV",
              "SX",
              "SY",
              "SZ",
              "TC",
              "TD",
              "TF",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TL",
              "TM",
              "TN",
              "TO",
              "TR",
              "TT",
              "TV",
              "TW",
              "TZ",
              "UA",
              "UG",
              "UM",
              "US",
              "UY",
              "UZ",
              "VA",
              "VC",
              "VE",
              "VG",
              "VI",
              "VN",
              "VU",
              "WF",
              "WS",
              "YE",
              "YT",
              "ZA",
              "ZM",
              "ZW"
            ]
          },
          "zip": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Zip. Constraints: Size(min=1, max=15)"
          },
          "line1": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "Line 1. Constraints:Not null,  Size(min=1, max=90)"
          },
          "line2": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "Line 2. Constraints: Size(min=1, max=90)"
          }
        },
        "description": "Customer's shipping or home address. Constraints: Optional, ignore null value,"
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Customer's email address. Constraints: Optional, ignore null value, Valid email format"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequestGeneric"
          },
          "first_name": {
            "maxLength": 30,
            "minLength": 3,
            "type": "string"
          },
          "last_name": {
            "maxLength": 30,
            "minLength": 3,
            "type": "string",
            "description": "Customer's lastName. Constraints: Optional, ignore null value, Size(min=3, max=30)"
          },
          "birth_date": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "type": "string",
            "description": "Customer's birthdate. Constraints: Optional, ignore null value, format(YYYY-MM-DD)"
          },
          "phone_number": {
            "pattern": "^\\+?(?:[0-9] ?){6,14}[0-9]$",
            "type": "string",
            "description": "Customer's phone number. Constraints: Optional, ignore null value, only digit 0-9 and Size(min=1, max=15)"
          }
        }
      },
      "AccountRequestUpdate": {
        "type": "object",
        "properties": {
          "holder_address": {
            "$ref": "#/components/schemas/AddressRequestGeneric"
          },
          "holder_name": {
            "maxLength": 60,
            "minLength": 3,
            "type": "string",
            "description": "The holder name. Constraints: Size(min=3, max=60)"
          },
          "default": {
            "type": "boolean",
            "description": "Indicating whether this card is the default sources of payment"
          }
        }
      },
      "CardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account Id"
          },
          "object": {
            "type": "string",
            "description": "Card Object Name"
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "brand": {
            "type": "string",
            "description": "Card Brand Name",
            "enum": ["mastercard", "visa"]
          },
          "status": {
            "type": "string",
            "description": "Status of the card account",
            "enum": [
              "created",
              "validated",
              "verified",
              "verification_failed",
              "errored",
              "deleted"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The 3 letter representing the Currency.",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "token": {
            "type": "string",
            "description": "Unique identifier of the bank data as returned by the CyberSource TMS API bank account number"
          },
          "fingerprint": {
            "type": "string",
            "description": "Unique identifier of the card number as returned by the CyberSource TMS API"
          },
          "duplicateCard": {
            "type": "boolean"
          },
          "cvc_check": {
            "type": "string",
            "description": "Card Verification Code check result",
            "enum": ["pass", "fail", "unavailable", "unchecked"]
          },
          "exp_month": {
            "type": "string",
            "description": "Expiration Month"
          },
          "exp_year": {
            "type": "string",
            "description": "Expiration Year"
          },
          "last_four": {
            "type": "string",
            "description": "The last 4 digits of the card Number"
          },
          "customer_id": {
            "type": "string",
            "description": "Customer Unique Id"
          },
          "statement_descriptor": {
            "type": "string",
            "description": "Provides information about the charge that customers see on their statements. Maximum 22 characters."
          },
          "default": {
            "type": "boolean",
            "description": "This flag indicate if this is the default source or not. "
          },
          "holder_name": {
            "type": "string",
            "description": "Holder name. Name of the owner as written on the card."
          },
          "holder_type": {
            "type": "string",
            "description": "Card Holder Type. ",
            "enum": ["individual", "company"]
          }
        }
      },
      "MobileRequestUpdate": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Indicating whether this is the default destination of payment"
          }
        }
      },
      "MobileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account Id"
          },
          "object": {
            "type": "string",
            "description": "Card Object Name"
          },
          "type": {
            "type": "string",
            "description": "Account Type",
            "enum": ["bank", "balance", "card", "fees", "mobile"]
          },
          "status": {
            "type": "string",
            "description": " Status of the card account",
            "enum": [
              "created",
              "validated",
              "verified",
              "verification_failed",
              "errored",
              "deleted"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The 3 letter representing the Currency.",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "duplicateMobile": {
            "type": "boolean"
          },
          "brand": {
            "type": "string",
            "description": "The brand name.",
            "enum": ["ecocash", "lumicash"]
          },
          "language": {
            "type": "string",
            "description": "The Customer Prefered Language.",
            "enum": ["en", "fr", "kr"]
          },
          "number": {
            "type": "string",
            "description": "Mobile Money Account"
          },
          "holder_type": {
            "type": "string",
            "description": "Source Holder Type. ",
            "enum": ["individual", "company"]
          },
          "default": {
            "type": "boolean",
            "description": "This flag indicate if this is the default source or not. "
          },
          "holder_name": {
            "type": "string",
            "description": "Holder name. Name of the owner as written on the mobile mobile account."
          }
        }
      },
      "AddressRequestRestricted": {
        "required": ["city", "country", "line1", "line2", "type"],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 90,
            "minLength": 3,
            "type": "string",
            "description": "City. Constraints: Not null, Size(min=3, max=90)"
          },
          "state": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "State. Constraints: Size(min=1, max=90)"
          },
          "type": {
            "type": "string",
            "description": "The type of address. Constraints: Not null",
            "enum": ["personal", "business"]
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO Country Code. Constraints: Not null, Size(min=2, max=3)",
            "enum": ["BI"]
          },
          "zip": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Zip. Constraints: Size(min=1, max=15)"
          },
          "line1": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "Line 1. Constraints:Not null,  Size(min=1, max=90)"
          },
          "line2": {
            "maxLength": 90,
            "minLength": 1,
            "type": "string",
            "description": "Line 2. Constraints: Size(min=1, max=90)"
          }
        },
        "description": "The bank address"
      },
      "BankRequestUpdate": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressRequestRestricted"
          },
          "default": {
            "type": "boolean",
            "description": "Indicating whether this bank account is the default payout account. Constraints: Not null"
          }
        }
      },
      "BankDestinationResponse": {
        "required": ["bank_response", "holder_type"],
        "type": "object",
        "properties": {
          "holder_type": {
            "type": "string",
            "description": "Holder Type",
            "enum": ["individual", "company"]
          },
          "bank_response": {
            "$ref": "#/components/schemas/BankResponse"
          }
        }
      },
      "BankResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Object name "
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "defaultPayout": {
            "type": "boolean"
          },
          "owner_name": {
            "type": "string",
            "description": "Name of the account owner."
          },
          "type": {
            "type": "string",
            "description": "Type of payout account.",
            "enum": ["bank", "mobile"]
          },
          "bank_name": {
            "type": "string",
            "description": "Bank Name "
          },
          "account_id": {
            "type": "string",
            "description": "Account id."
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating whether the account is a default payout or not."
          },
          "account_number": {
            "type": "string",
            "description": "Account Number "
          },
          "routing_number": {
            "type": "string",
            "description": "Routing transit number for the bank account"
          },
          "created_at_date": {
            "type": "integer",
            "description": "The date and time that the payout was created",
            "format": "int64"
          }
        },
        "description": "Bank Response"
      },
      "VerificationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "isForRegistrationCode": {
            "type": "boolean"
          },
          "expirationTime": {
            "type": "integer",
            "format": "int64"
          },
          "isConfirmed": {
            "type": "boolean"
          },
          "confirmed": {
            "type": "boolean"
          },
          "forRegistrationCode": {
            "type": "boolean"
          }
        }
      },
      "ChargeUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "captured": {
            "type": "boolean"
          }
        }
      },
      "TransferRequest": {
        "required": ["amount", "description", "merchant_id", "type"],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999,
            "type": "integer",
            "description": " Amount to be transferred. Contraint: Not null, Max: 99999999",
            "format": "int64"
          },
          "description": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "description": " Short description of the transfer. Constraints: Not null, Size(min=3, max=100)"
          },
          "type": {
            "type": "string",
            "description": "Type of the transfer. Either deposit or reversal. constraint: Not null",
            "enum": ["deposit", "reversal"]
          },
          "merchant_id": {
            "type": "string",
            "description": " ID of the merchant receiving the funds for a Deposit or Sending a fund for a Reversal. Constraint: Required for deposit type "
          }
        }
      },
      "RefundRequest": {
        "required": ["amount", "charge_id", "invoice_id", "reason"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded. We can refund the whole amount in the charge or part of it. The amount shouldn't be more than amount in the charge.",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "Description of the refund."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund.",
            "enum": ["duplicate", "fraudulent", "requested_by_customer"]
          },
          "charge_id": {
            "type": "string",
            "description": "Charge id related to this refund."
          },
          "invoice_id": {
            "type": "string",
            "description": "Invoice Id related to the refund. Constraint: Not Null "
          }
        }
      },
      "RateRequest": {
        "required": ["amount", "code", "name", "time_limit", "type"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rate Name"
          },
          "code": {
            "maxLength": 20,
            "minLength": 3,
            "type": "string",
            "description": " Code of the Rate. Constraints: Not null, Size(min=3, max=20)"
          },
          "type": {
            "type": "string",
            "description": " Rates Type ",
            "enum": ["time", "amountLimit", "timeProximity"]
          },
          "days": {
            "type": "array",
            "description": " Week Days ",
            "items": {
              "type": "string",
              "description": " Week Days ",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          },
          "amount": {
            "type": "number",
            "description": " Rate amount ",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": " Descrition of the Rates"
          },
          "from_date": {
            "type": "string",
            "description": " From date for time based rates, format(YYYY-MM-DD)",
            "format": "date"
          },
          "to_date": {
            "type": "string",
            "description": " To date for time based rates, format(YYYY-MM-DD)",
            "format": "date"
          },
          "time_limit": {
            "type": "string",
            "description": " Time Limit Type ",
            "enum": ["sameDay", "sameWeek", "sameMonth"]
          },
          "amount_limit": {
            "type": "integer",
            "description": " Amount limit used for the  Amount based Rate.",
            "format": "int64"
          }
        }
      },
      "ProductRequest": {
        "required": [
          "code",
          "description",
          "name",
          "price_details",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 3,
            "type": "string",
            "description": " Name of the product. Constraints: Not null, Size(min=3, max=80)"
          },
          "code": {
            "maxLength": 20,
            "minLength": 3,
            "type": "string",
            "description": " Code of the product. Constraints: Not null, Size(min=3, max=20)"
          },
          "description": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "description": " Short description of the product. Constraints: Not null, Size(min=3, max=100)"
          },
          "type": {
            "type": "string",
            "description": " Product type. Constraints: Not null",
            "enum": [
              "service",
              "good",
              "addon",
              "standard_room",
              "single_room",
              "double_room",
              "triple_room",
              "quad_room",
              "suite_room",
              "presidential_room",
              "king_room",
              "queen_room",
              "interconnecting_room",
              "adjoining_room",
              "adjacent_room",
              "studio_room",
              "efficiency_room",
              "chalet",
              "condo",
              "duplex",
              "room",
              "apartment",
              "hospitality"
            ]
          },
          "status": {
            "type": "string",
            "description": " Status of the product.",
            "enum": ["soldout", "available", "unavailable"]
          },
          "images": {
            "type": "array",
            "description": " List of images URL of the product",
            "items": {
              "type": "string",
              "description": " List of images URL of the product"
            }
          },
          "price_details": {
            "type": "array",
            "description": " List of Product Price Details. Constraints: Not null ",
            "items": {
              "$ref": "#/components/schemas/PriceDetailRequest"
            }
          },
          "attributes_hospitality_industry": {
            "$ref": "#/components/schemas/ProductAttribute"
          },
          "rate_ids": {
            "type": "array",
            "description": " List of Rate Id that can be applied to the product price. ",
            "items": {
              "type": "string",
              "description": " List of Rate Id that can be applied to the product price. "
            }
          }
        }
      },
      "PayoutRequest": {
        "required": ["amount", "description", "payout_id", "type"],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 99999999,
            "type": "integer",
            "description": "Amount to be sent. Constraint: notnull. Max number is 99999999",
            "format": "int64"
          },
          "description": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "description": " Short description of the payout. Constraints: Not null, Size(min=3, max=100)"
          },
          "type": {
            "type": "string",
            "description": "Type of the payout. Constraint: NotNull ",
            "enum": ["bank", "card"]
          },
          "payout_id": {
            "type": "string",
            "description": "Payout Account Id - Account receiving the fund.  Constraint: Notnull"
          }
        }
      },
      "CardRequest": {
        "required": [
          "address",
          "brand",
          "cvc",
          "default",
          "exp_month",
          "exp_year",
          "holder_name",
          "number"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "Card's Brand Name. Constraints: Not null",
            "enum": ["mastercard", "visa"]
          },
          "cvc": {
            "pattern": "[\\d]{3}",
            "type": "string",
            "description": "Card's Verification Code. Constraints: Not null, only digit 0-9 and Size(3)"
          },
          "number": {
            "pattern": "^[0-9]{14,19}$",
            "type": "string",
            "description": "Card's Number. Constraints: Not null, Size(14 to 19)"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequestGeneric"
          },
          "exp_month": {
            "pattern": "\\d{2}",
            "type": "string",
            "description": "Card's Expiration Month. Constraints: Not null, only digit 0-9 and Size(2)"
          },
          "exp_year": {
            "pattern": "\\d{4}",
            "type": "string",
            "description": "Card's Expiration Year. Constraints: Not null, Size(4)"
          },
          "holder_name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Holder name. Name of the owner as written on the card. Constraints: Not null, Size(50)"
          },
          "default": {
            "type": "boolean",
            "description": "Indicating whether this card is the default sources of payment. Constraints: Not null"
          }
        }
      },
      "InvoiceChargeAuthRequest": {
        "required": ["currency"],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "source": {
            "$ref": "#/components/schemas/CardRequest"
          },
          "invoice_id": {
            "type": "string"
          }
        }
      },
      "ChargeAuthResponse": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoice_id": {
            "type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "order_channel": {
            "type": "string",
            "enum": ["S"]
          }
        }
      },
      "InvoiceRequest": {
        "required": ["customer_id", "description", "due_date", "products"],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 120,
            "minLength": 3,
            "type": "string",
            "description": " Description of the invoice. Constraints: Not null, min=3 and max=120"
          },
          "affiliate": {
            "type": "string",
            "description": "affiliate that can be used on this invoice",
            "enum": ["dwelinn"]
          },
          "sendForManualPayment": {
            "type": "boolean"
          },
          "customer_id": {
            "type": "string",
            "description": " Customer Id. Constraints: Not null  "
          },
          "products": {
            "type": "array",
            "description": " List of product and quantity. Constraints: Not null, Not Empty",
            "items": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "due_date": {
            "type": "string",
            "description": " Invoice due date. Constraints: Not null, format(YYYY-MM-DD)",
            "format": "date"
          },
          "source_id": {
            "type": "string",
            "description": "Customer existing source information."
          },
          "manual_payment": {
            "type": "boolean",
            "description": " Collection Method of this invoice: If the payment is automatic then the system will charge against the customer register card. If it is manual the system will send an email to the customer with payment instruction."
          },
          "rate_id": {
            "type": "string",
            "description": "Rate Id that can be used on this invoice."
          }
        }
      },
      "ItemRequest": {
        "required": ["product_id", "quantity"],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": " Quantity for this product. Constraints: Not null",
            "format": "int64"
          },
          "product_id": {
            "type": "string",
            "description": " Product Identifications. Constraints: Not Null "
          }
        },
        "description": " List of product and quantity. Constraints: Not null, Not Empty"
      },
      "InvoiceAmountRequest": {
        "required": ["currency", "products"],
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": " List of product and quantity. Constraints: Not null, Not Empty",
            "items": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "rate_id": {
            "type": "string",
            "description": "Rate Id that can be used on this invoice."
          },
          "currency": {
            "type": "string",
            "description": "Currency to be used on this invoice.",
            "enum": ["BIF", "USD", "KES", "XAF"]
          }
        }
      },
      "InvoiceAmountResponse": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": " Currency of the amount in the invoice. ",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "amount_due": {
            "type": "integer",
            "description": "amount upon applying the rate to be paid for this Invoice. ",
            "format": "int64"
          },
          "rate_id": {
            "type": "string",
            "description": "Rate Id that can be used on this invoice."
          }
        }
      },
      "EmailRequest": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "email_content": {
            "type": "string"
          }
        }
      },
      "CustomerRequest": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "description": "Customer's email address. Constraints: Not null, Valid email format"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequestGeneric"
          },
          "first_name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Customer's firstname. Constraints: Size(min=3, max=30)"
          },
          "last_name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Customer's lastName. Constraints: Size(min=3, max=30)"
          },
          "birth_date": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "type": "string",
            "description": "Customer's birthdate. Constraints: format(YYYY-MM-DD)"
          },
          "phone_number": {
            "pattern": "^\\+?(?:[0-9] ?){6,14}[0-9]$",
            "type": "string",
            "description": "Customer's phone number. Constraints: only digit 0-9 and Size(min=1, max=15)"
          }
        }
      },
      "BankDestinationRequest": {
        "required": ["bank_request", "holder_type"],
        "type": "object",
        "properties": {
          "holder_type": {
            "type": "string",
            "description": "Holder Type",
            "enum": ["individual", "company"]
          },
          "bank_request": {
            "$ref": "#/components/schemas/BankRequest"
          }
        }
      },
      "BankRequest": {
        "required": [
          "account_number",
          "bank_name",
          "currency",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Card Currency",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequestRestricted"
          },
          "account_number": {
            "type": "string",
            "description": "Bank Account Number"
          },
          "routing_number": {
            "type": "string",
            "description": "Routing transit number for the bank account"
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name"
          }
        },
        "description": "bank request"
      },
      "ChargeMobileRequest": {
        "required": ["amount", "captured", "currency", "description"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequestMobile"
          },
          "source": {
            "$ref": "#/components/schemas/MobileRequest"
          },
          "source_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "captured": {
            "type": "boolean"
          },
          "invoice_reference_id": {
            "type": "string"
          },
          "customer_reference_id": {
            "type": "string"
          },
          "otp": {
            "maxLength": 6,
            "minLength": 6,
            "type": "string"
          }
        }
      },
      "CustomerRequestMobile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Customer's email address. Constraints: Not null, Valid email format"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequestGeneric"
          },
          "first_name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Customer's firstname. Constraints: Size(min=3, max=30)"
          },
          "last_name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Customer's lastName. Constraints: Size(min=3, max=30)"
          },
          "birth_date": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "type": "string",
            "description": "Customer's birthdate. Constraints: format(YYYY-MM-DD)"
          },
          "phone_number": {
            "pattern": "^\\+?(?:[0-9] ?){6,14}[0-9]$",
            "type": "string",
            "description": "Customer's phone number. Constraints: only digit 0-9 and Size(min=1, max=15)"
          }
        }
      },
      "ChargeCardRequest": {
        "required": ["amount", "captured", "currency", "description"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "source": {
            "$ref": "#/components/schemas/CardRequest"
          },
          "source_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "captured": {
            "type": "boolean"
          },
          "invoice_reference_id": {
            "type": "string"
          },
          "customer_reference_id": {
            "type": "string"
          }
        }
      },
      "ChargeAuthRequest": {
        "required": ["added_mode", "amount", "currency", "description"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "description": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/CardRequest"
          },
          "source_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "invoice_reference_id": {
            "type": "string"
          },
          "customer_reference_id": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "added_mode": {
            "type": "boolean"
          }
        }
      },
      "PageFilterTransfer": {
        "required": ["page", "size", "type"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "description": "Page Number. Constraints: Not null",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "description": "Total Element in the page. Constraints: Not null",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": ["outgoing", "incoming"]
          },
          "merchant_id": {
            "type": "string"
          }
        }
      },
      "TransfersResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Array"
          },
          "page": {
            "type": "integer",
            "description": "The current page returned",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "The total size in a page",
            "format": "int32"
          },
          "live": {
            "type": "boolean",
            "description": "Flag to indicate whether this is live mode or not"
          },
          "total_elements": {
            "type": "integer",
            "description": "The total elements",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total pages",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "description": "List of transfers",
            "items": {
              "$ref": "#/components/schemas/TransferResponse"
            }
          }
        }
      },
      "PageFilterTransactionLines": {
        "required": ["page", "size"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "description": "Page Number. Constraints: Not null",
            "format": "int32",
            "example": 2
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "description": "Total Element in the page. Constraints: Not null",
            "format": "int32",
            "example": 2
          },
          "transaction_id": {
            "type": "string",
            "description": "Transaction Id"
          }
        }
      },
      "TransactionLineResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the Transaction Line"
          },
          "object": {
            "type": "string",
            "description": "Type of object returned -  Transaction Lines"
          },
          "amount": {
            "type": "integer",
            "description": "Amount collected for the transaction",
            "format": "int64"
          },
          "account": {
            "type": "string",
            "description": "Account number with the affected Balances"
          },
          "balance_available": {
            "type": "integer",
            "description": "Balance available for in this account",
            "format": "int64"
          },
          "balance_pending": {
            "type": "integer",
            "description": "Pending balance in this account.",
            "format": "int64"
          },
          "created_date": {
            "type": "integer",
            "description": "Date created.",
            "format": "int64"
          },
          "transaction_id": {
            "type": "string",
            "description": "Transaction Id."
          },
          "type": {
            "type": "string",
            "description": "Type of the transaction line.",
            "enum": ["debit", "credit"]
          }
        },
        "description": "List of Transaction line"
      },
      "TransactionLinesResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Array"
          },
          "page": {
            "type": "integer",
            "description": "The current page returned",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "The total size in a page",
            "format": "int32"
          },
          "transactionLineResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLineResponse"
            }
          },
          "live": {
            "type": "boolean",
            "description": "Flag to indicate whether this is live mode or not"
          },
          "total_elements": {
            "type": "integer",
            "description": "The total elements",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total pages",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "description": "List of Transaction line",
            "items": {
              "$ref": "#/components/schemas/TransactionLineResponse"
            }
          }
        }
      },
      "PageFilterRefund": {
        "required": ["page", "size"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "description": "Page Number. Constraints: Not null",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "description": "Total Element in the page. Constraints: Not null",
            "format": "int32"
          },
          "source_id": {
            "type": "string",
            "description": "Source Id - Card receiving the fund"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund. ",
            "enum": ["succeeded", "paid", "pending", "failed"]
          }
        }
      },
      "RefundsResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Object name returned - Refund"
          },
          "page": {
            "type": "integer",
            "description": "The current page returned",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "The total size in a page",
            "format": "int32"
          },
          "live": {
            "type": "boolean",
            "description": "Flag to indicate whether this is live mode or not"
          },
          "total_elements": {
            "type": "integer",
            "description": "The total elements",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total pages",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "description": "List of refunds",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            }
          }
        }
      },
      "PageFilter": {
        "required": ["page", "size"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "description": "Page Number. Constraints: Not null",
            "format": "int32"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "Total Element in the page. Constraints: Not null",
            "format": "int32"
          }
        }
      },
      "RatesResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Number of element in a page.",
            "format": "int32"
          },
          "total_elements": {
            "type": "integer",
            "description": "Total Elements.",
            "format": "int64"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total Pages.",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "description": "List of Products",
            "items": {
              "$ref": "#/components/schemas/RateResponse"
            }
          }
        }
      },
      "ProductsResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Number of element in a page.",
            "format": "int32"
          },
          "total_elements": {
            "type": "integer",
            "description": "Total Elements.",
            "format": "int64"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total Pages.",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "description": "List of Products",
            "items": {
              "$ref": "#/components/schemas/ProductResponse"
            }
          }
        }
      },
      "PageFilterPayout": {
        "required": ["page", "size"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "description": "Page Number. Constraints: Not null",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "description": "Total Element in the page. Constraints: Not null",
            "format": "int32"
          },
          "source_id": {
            "type": "string",
            "description": "Source Id"
          },
          "status": {
            "type": "string",
            "description": "Payout Status",
            "enum": ["paid", "pending", "in_transit", "canceled", "failed"]
          }
        }
      },
      "PayoutsResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Array"
          },
          "page": {
            "type": "integer",
            "description": "The current page returned",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "The total size in a page",
            "format": "int32"
          },
          "live": {
            "type": "boolean",
            "description": "Flag to indicate whether this is live mode or not"
          },
          "total_elements": {
            "type": "integer",
            "description": "The total elements",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total pages",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "description": "List of Payouts",
            "items": {
              "$ref": "#/components/schemas/PayoutResponse"
            }
          }
        }
      },
      "InvoicePageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": " Generated Invoice Id by the system "
          },
          "object": {
            "type": "string",
            "description": " Invoice object. "
          },
          "currency": {
            "type": "string",
            "description": " Currency of the amount in the invoice. ",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "description": {
            "type": "string",
            "description": " Description of the invoice. "
          },
          "logo": {
            "type": "array",
            "description": "Merchant Logo",
            "items": {
              "type": "string",
              "description": "Merchant Logo",
              "format": "byte"
            }
          },
          "invoice_number": {
            "type": "string",
            "description": " Invoice Number in a readable version for the user. "
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email"
          },
          "customer_first_name": {
            "type": "string",
            "description": "Customer firstname"
          },
          "customer_last_name": {
            "type": "string",
            "description": "Customer lastname"
          },
          "customer_mobile": {
            "type": "string",
            "description": "Customer mobile"
          },
          "customer_address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "products": {
            "type": "array",
            "description": " List of product and quantity. ",
            "items": {
              "$ref": "#/components/schemas/ItemResponse"
            }
          },
          "statement_descriptor": {
            "type": "string",
            "description": " Statement Descriptor of the Merchant. This is a readOnly data. "
          },
          "issue_date": {
            "type": "integer",
            "description": " Invoice issue date. ",
            "format": "int64"
          },
          "due_date": {
            "type": "integer",
            "description": " Invoice due date. ",
            "format": "int64"
          },
          "amount": {
            "type": "integer",
            "description": " Initial payment request amount to the customer for the service or product of the merchant.  ",
            "format": "int64"
          },
          "amount_due": {
            "type": "integer",
            "description": "Remaining amount due in order to clear this Invoice. ",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": " Status of the invoices: Draft, Pending, Paid, Void",
            "enum": [
              "draft",
              "pending",
              "sent",
              "paid",
              "voided",
              "overdue",
              "refunded"
            ]
          },
          "charge": {
            "$ref": "#/components/schemas/ChargeResponse"
          },
          "url": {
            "type": "string",
            "description": " Invoice Url"
          },
          "manual_payment": {
            "type": "boolean",
            "description": "Send invoice via email for manual payments."
          },
          "merchant_name": {
            "type": "string",
            "description": "Merchant Business Name"
          },
          "merchant_legal_name": {
            "type": "string",
            "description": "Legal Merchant Business Name"
          },
          "merchant_phone_number": {
            "type": "string",
            "description": "Merchant Phone Number"
          },
          "merchant_email": {
            "type": "string",
            "description": "Merchant Email"
          },
          "merchant_url": {
            "type": "string",
            "description": "Optional field that describe the website URL of merchant."
          },
          "merchant_id": {
            "type": "string",
            "description": "Merchant Id."
          },
          "support_url": {
            "type": "string",
            "description": "Optional field that describe the website URL of the merchant support pages."
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          }
        }
      },
      "InvoicesResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Number of element in a page.",
            "format": "int32"
          },
          "total_elements": {
            "type": "integer",
            "description": "Total Elements.",
            "format": "int64"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total Pages.",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "description": "List of invoices.",
            "items": {
              "$ref": "#/components/schemas/InvoiceResponse"
            }
          }
        }
      },
      "CustomersResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Number of element in a page.",
            "format": "int32"
          },
          "total_elements": {
            "type": "integer",
            "description": "Total Elements.",
            "format": "int64"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total Pages.",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "description": "List of customers",
            "items": {
              "$ref": "#/components/schemas/CustomerResponse"
            }
          }
        }
      },
      "OtaVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "expirationTime": {
            "type": "integer",
            "format": "int64"
          },
          "isConfirmed": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "confirmed": {
            "type": "boolean"
          }
        }
      },
      "PageFilterCharge": {
        "required": ["page", "size"],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "customer_id": {
            "type": "string"
          },
          "sending_account_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["succeeded", "paid", "pending", "failed"]
          },
          "refunded": {
            "type": "boolean"
          },
          "captured": {
            "type": "boolean"
          },
          "sort": {
            "type": "string",
            "enum": ["available_date", "modified"]
          }
        }
      },
      "ChargesResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "live": {
            "type": "boolean"
          },
          "total_elements": {
            "type": "integer",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeResponse"
            }
          }
        }
      },
      "AnalyticFilter": {
        "required": ["date_from", "date_to", "type"],
        "type": "object",
        "properties": {
          "date_from": {
            "type": "string",
            "format": "date"
          },
          "date_to": {
            "type": "string",
            "format": "date"
          },
          "group_by": {
            "type": "string",
            "enum": ["day", "week", "month"]
          },
          "type": {
            "type": "string",
            "enum": [
              "failed_payments",
              "new_customers",
              "payouts",
              "refunds",
              "successful_payments",
              "transfers"
            ]
          }
        }
      },
      "AnalyticsResponse": {
        "type": "object",
        "properties": {
          "livemode": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payouts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "refunds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "transfers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "avgRevenuePerCustomer": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "date_from": {
            "type": "string"
          },
          "date_to": {
            "type": "string"
          },
          "group_by": {
            "type": "string",
            "enum": ["day", "week", "month"]
          },
          "successful_payments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "avg_revenue_per_charge": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "annual_run_rate": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "failed_payments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "gross_revenue": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "net_revenue": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "new_customers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "EventByTransactionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "customer": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "canceled",
              "captured",
              "deposit",
              "failed",
              "in_transit",
              "paid",
              "pending",
              "description_updated",
              "refund_succeeded",
              "refund_pending",
              "refund_failed",
              "reversal",
              "succeeded"
            ]
          },
          "type": {
            "type": "string",
            "enum": ["charge", "payout", "refund", "transfer"]
          },
          "account": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "destination": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "created_date": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventByTransactionsResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "live": {
            "type": "boolean"
          },
          "total_elements": {
            "type": "integer",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventByTransactionResponse"
            }
          }
        }
      },
      "EventByAccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": ["BIF", "USD", "KES", "XAF"]
          },
          "customer": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "address_invalid",
              "address_line1_pass",
              "address_line1_name_pass",
              "address_line1_zip_pass",
              "address_name_pass",
              "address_name_zip_pass",
              "address_unchecked",
              "address_verified",
              "address_zip_pass",
              "created",
              "deleted",
              "errored",
              "validated",
              "verification_failed",
              "verified"
            ]
          },
          "type": {
            "type": "string",
            "enum": ["bank", "balance", "card"]
          },
          "created_date": {
            "type": "integer",
            "format": "int64"
          },
          "holder_type": {
            "type": "string",
            "enum": ["individual", "company"]
          }
        }
      },
      "EventByAccountsResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "live": {
            "type": "boolean"
          },
          "total_elements": {
            "type": "integer",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventByAccountResponse"
            }
          }
        }
      },
      "RateDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "deleted": {
            "type": "boolean",
            "description": " Flag indicating that the Rate has been deleted."
          }
        }
      },
      "ProductDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "deleted": {
            "type": "boolean",
            "description": " Flag indicating that the product has been deleted."
          }
        }
      },
      "InvoiceDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invoice ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "deleted": {
            "type": "boolean",
            "description": " Flag indicating that the invoice is delete."
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "deleted": {
            "type": "boolean",
            "description": " Flag indicating that the customer has been deleted."
          }
        }
      },
      "AccountDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Account ID"
          },
          "object": {
            "type": "string",
            "description": "The object name"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating that the account has been deleted."
          }
        }
      }
    }
  }
}
